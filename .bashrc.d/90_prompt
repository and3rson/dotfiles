#!/bin/bash
# vim:foldmethod=marker

# Configs {{{
#ARROW=`echo -e "\ue0b0 "`
#ARROW=`echo -e "\ue0bc "`
ARROW=`echo -e ""`
ARROW=`echo -e "\e[38;5;238m\u23AA"`
ARROW=''
#ARROW=`echo -e "\ue0d2 "`
#HOUSE=`echo -e "\u2302"`
#HOUSE=`echo -e "\uE614"`
#HOUSE=`echo -e "\uF015"`
HOUSE="~"
ROOT=`echo -e "\uE614"`
#PWD_SEP=`echo -e "\uF0DA"`
PWD_SEP="/"
PY_ICON=`echo -e "\uE606"`
ELLIPSIS=`echo -e "\u2026"`
#SPACE=`echo -e "\u2423"`
SPACE=`echo -e "\u00B7"`
case $(tty) in /dev/tty[0-9]*)
    ARROW=''; HOUSE=''; ROOT='' ;;
esac
# }}}

# Utils {{{
fetch_cursor_position() {
  local pos

  IFS='[;' read -p $'\e[6n' -d R -a pos -rs || echo "failed with error: $? ; ${pos[*]}"
  #echo "${pos[1]}:${pos[2]}"
  echo "${pos[2]}"
}

chars_remaining() {
    echo $((`tput cols` - `fetch_cursor_position`))
}
# }}}

function make_prompt() {
    RETCODE=$?
    #START=$(echo -en "\uF2D0")
    RST="\[\e[0m\]"
    START=""
    STAR=$(echo -en "\uF005")
    PULSE=$(echo -en "\uE234")
    #ARROW=$(echo -en "\uE0BC")
    GIT=$(echo -en "\uE725")
    #CODE=$(echo -en "\uF054")
    CODE=$(echo -en "\uE285")
    ROOT=$(echo -en "\uE614")
    LAST_BACK=""
    LAST_FORE=255
    LAST_FORE_MOD=0

    PRINTED=0

    function fgcol() { # {{{
        echo -n "\[\e[38;5;$1m\]"
    } # }}}

    function fb() { # {{{
        FORE=$1
        BACK=$2
        FORE_MOD=${3:-0}
        if [[ "$4" == "-" ]]
        then
            ARROW=""
        fi
        #if [[ "$LAST_BACK" != "" && "$LAST_BACK" != "$BACK" ]]
        #then
        #    echo -n "\[\e[48;5;${BACK}m\]\[\e[38;5;${LAST_BACK}m\]$ARROW"
        #fi

        if [[ "$LAST_BACK" != "" ]]
        then
            echo -n "\[\e[48;5;${BACK}m\]\[\e[38;5;${LAST_BACK}m\]$ARROW"
        fi
        echo -n "\[\e[$FORE_MOD;38;5;${FORE}m\]"
        echo -n "\[\e[48;5;${BACK}m\]"
        printf -v "LAST_BACK" "$BACK"
        printf -v "LAST_FORE" "$FORE"
        printf -v "LAST_FORE_MOD" "$FORE_MOD"
    } # }}}

    function hr_line() { # {{{
        #fb 32 234
        if [[ "$RETCODE" != "0" ]]
        then
            fb 160
        else
            fb 236
        fi
        S=`printf "%$(tput cols)s\r"`
        #echo $S
        echo -n ${S// /─}
    } # }}}

    function brk() { # {{{
        if [ "$PRINTED" -gt 0 ]
        then
            #fb 32 234
            #echo -en '\e[K\e[0m'
            #printf "%`chars_remaining`s" | tr ' ' '-'
            printf -v "LAST_BACK" ""
            #echo -e "\e[0;42m\e[K asd"
            echo
        fi
    } # }}}

    function ssh_part() { # {{{
        if ! [[ -z "$SSH_CONNECTION" ]]
        then
            PRINTED=$((PRINTED+1))
            fb 202 234
            echo -n " @ $(hostname) $RST"
        fi
    } # }}}

    function date_part() { # {{{
        #fb 255 125
        fb 32 234
        #date +" $START %H:%M:%S $RST" | tr -d '\n'
        date +" %H:%M:%S $RST" | tr -d '\n'
    } # }}}

    function venv_part() { # {{{
        if [[ ! -z "$VIRTUAL_ENV" ]]
        then
            PRINTED=$((PRINTED+1))
            #fb 255 22
            fb 28 234
            #fore 22
            #arrow
            NAME=`echo $VIRTUAL_ENV | awk -F'/' '{print $NF}'`
            echo -n ""
            #echo -en "$VIRTUAL_ENV $RST" | awk -F/ '{print $(NF-1)"/"$NF}' | tr -d '\n'
            echo -en " $PY_ICON $NAME $RST"
        #elif [[ -f ".env/bin/activate" ]]
        #then
        #    VIRTUAL_ENV=$( . .env/bin/activate; echo $VIRTUAL_ENV )
        #    #fb 255 160
        #    fb 160 234
        #    echo -n ""
        #    #echo -en "$VIRTUAL_ENV $RST" | awk -F/ '{print $(NF-1)"/"$NF}' | tr -d '\n'
        #    echo -en " $PY_ICON env! $RST"
        fi
    } # }}}

    function git_part() { # {{{
        BRANCH="$(git rev-parse --symbolic-full-name --abbrev-ref HEAD 2>&1)"
        if [[ "$?" -eq "0" ]]
        then
            PRINTED=$((PRINTED+1))
            INFO_STR="$(git log --abbrev=8 --format="%h%n%an%n%s" -n 1)"
            IFS=$'\n' read -rd '' -a INFO <<< "$INFO_STR"
            HASH=${INFO[0]}
            AUTHOR=${INFO[1]}
            MESSAGE=${INFO[2]}
            #OUT=$(git status -s 2>&1)
            if [ "${#BRANCH}" -gt 24 ]
            then
                BRANCH="${BRANCH::23}$ELLIPSIS"
            fi
            if [ "${#MESSAGE}" -gt 30 ]
            then
                MESSAGE="${MESSAGE::29}$ELLIPSIS"
            fi
            COLOR=41
            #if [ "$OUT" == "" ]
            #then
            #    COLOR=41
            #    C=''
            #else
            #    COLOR=3
            #    C='!'
            #fi
            DESCRIBE=`git describe --tags 2> /dev/null`
            TAG=""
            COUNT=""
            if [[ "$DESCRIBE" =~ \-([0-9]+)\- ]]
            then
                COUNT=${BASH_REMATCH[1]}
            fi
            if [[ "$DESCRIBE" =~ ^(.*)-([0-9]+)-g([0-9a-f]+)$ ]]
            then
                TAG=${BASH_REMATCH[1]}
            elif [[ "$DESCRIBE" != "" ]]
            then
                TAG=$DESCRIBE
            fi
            fb $COLOR 234
            if [[ "$TAG" != "" ]]
            then
                echo -n "  $TAG"
                if [[ "$COUNT" != "" ]]
                then
                    echo -n " (+$COUNT)"
                fi
            fi
            fb $COLOR 234 1
            if [[ "$BRANCH" != "HEAD" ]]
            then
                #echo -n " $GIT $BRANCH$C"
                echo -n " $BRANCH$C"
            else
                echo -n " (detached$C)"
            fi
            #fb 32 234
            fb 203 234
            #echo -n "  $HASH"
            echo -n " $HASH"
            fb 241 234
            #echo -n " ($AUTHOR: $MESSAGE)"
            echo -n " $RST"
        fi
    } # }}}

    function ret_part() { # {{{
        if [[ "$RETCODE" != "0" ]]
        then
            #&& [[ "$RETCODE" != "130" ]]
            PRINTED=$((PRINTED+1))
            #fb 255 160
            fb 255 160 1
            echo -en " $RETCODE $RST"
            fb 160
        else
            fb 234
        fi
        #echo -en "\ue0b0"
        #echo -en "\[$txtrst\]"
    } # }}}

    function dirs_part() { # {{{
        PRINTED=$((PRINTED+1))
        fb 31 234
        DIRS=$(find . -maxdepth 1 ! -path . -type d | wc -l)
        echo -en " \uE5FF $DIRS $RST"
    } # }}}

    function files_part() { # {{{
        PRINTED=$((PRINTED+1))
        fb 28 234 # 64
        FILES=$(find . -maxdepth 1 -type f -printf "%s\n")
        SIZE=$(echo $FILES | tr ' ' '+' | bc)
        SIZE=${SIZE:-0}
        SIZE=$(numfmt --to=iec-i --suffix=B --format="%.2f" $SIZE | sed -re "s/,00//g;s/([0-9])([A-Z])/\1 \2/g")
        # | tr -d "\n"
        echo -en " \uF15B $(echo $FILES | wc -w) ($SIZE) $RST"
    } # }}}

    function free_part() { # {{{
        fb 71 234
        if [[ "$PRINTED" == "0" ]]
        then
            echo -n ' '
        fi
        PRINTED=$((PRINTED+1))
        #echo -n "$(df -h / --output=avail | tail -n 1 | tr -d "\n ")iB free "
        echo -n "$(df -h . --output=avail | tail -n 1 | tr -d "\n ") free "
    } # }}}

    function pwd_part() { # {{{
        #SPACE=`echo -e '\u2026'`
        fb 32 234 # 255 27 1
        #fb 197 234 # 255 27 1
        DIR=${PWD/$HOME/$HOUSE\/}
        DIR=${DIR/\//}
        DIR=${DIR// /$SPACE}
        IFS='/'
        PARTS=($DIR)
        CURRENT=0
        COUNT=${#PARTS[@]}
        if [[ "$PWD" == "/" ]]
        then
            fgcol 238
            echo -en " / $RST"
        else
            for PART in ${PARTS[@]}
            do
                CURRENT=$((CURRENT+1))
                if [[ "$CURRENT" != "$COUNT" ]]
                then
                    #fgcol 32
                    fgcol 203
                    echo -n " ${PART::5}"
                    if [[ "${#PART}" -gt "5" ]]
                    then
                        echo -n "$ELLIPSIS"
                    fi
                    echo -n " "
                    fgcol 238
                    echo -n "$PWD_SEP"
                #elif [[ "$CURRENT" != "$COUNT" ]]
                #then
                #    fgcol 32
                #    echo -n " ${PART::3} "
                #    #fgcol 42
                #    fgcol 238
                #    echo -n "$PWD_SEP"
                #    #fb 32 234 0 -
                else
                    #fgcol 32
                    fgcol 203
                    echo -n " ${PART}"
                fi
            done
        fi
    } # }}}

    function pwd_part_old() { # {{{
        #fb 255 27 1
        if [[ "$PWD" == "/" ]]
        then
            fb 32 234 # 255 27 1
            echo -en " $ROOT $RST"
        else
            #echo $PWD
            DIR=${PWD/$HOME/$HOUSE\/}
            DIR=${DIR/\//}
            ##DIR=${DIR//\// \\uF44A }
            ##DIR=${DIR//\// \\uE0B1 }
            #DIR=${DIR//\// \\uE0BB }
            ##DIR=${DIR//\//  \\u258F }
            #echo -en "${DIR} $RST"
            OLD_IFS=$IFS
            IFS='/'
            NUM=100
            N=0
            COUNT=-1
            for _ in $DIR
            do
                COUNT=$((COUNT+1))
            done
            fb 32 234
            echo -n " "
            for i in $DIR
            do
                # Contrast colors
                for ((n=0; n<${#i}; n++ ))
                do
                    V=$(printf %d "'${i:$n:1}")
                    NUM=$((NUM+V))
                done
                NUM1=5
                NUM2=$NUM
                #NUM1=$N
                #NUM2=8
                BG=$((((NUM1%7)+1)*36-20 + NUM2%9))
                fb $BG 234
                #echo -n "$i "
                i_len=${#i}
                #i=${i::5}
                #
                #if [[ "$i_len" -gt "5" ]]
                #then
                #    i="$i"
                #fi
                #
                #if [[ "$i" == "~" ]]
                #then
                #    i="ﰣ"
                #fi
                echo -n "$i"
                #echo $N $COUNT
                if [[ "$N" != "$COUNT" ]]
                then
                    fb 238 234
                    echo -en " / "
                    #echo -n " " # "
                fi
                #echo -n a $i b
                #echo -n 1${i}${i}2
                N=$((N+1))
            done
            IFS=$OLD_IFS
        fi
    } # }}}

    function end_part() { # {{{
        fb 255
    } # }}}

    function dollar_part() { # {{{
        fb 32 0 1 -
        echo -n ' $'
    } # }}}

    #hr_line
    ssh_part
    #date_part
    venv_part
    git_part
    #dirs_part
    #files_part
    #free_part
    ret_part
    #end_part
    brk
    pwd_part_old
    #end_part
    #dollar_part
    echo -n " $RST "
    #echo -e "\e[0;38;5;32m"
}

function set_prompt() {
    #PS1="`info`"
    PS1="`make_prompt`"
    #PS1="`ret=$? /home/anderson/.config/qtile/bin/prompt.sh`"
    #PS1="`ret=$? /home/anderson/.config/qtile/bin/prompt.py`"
    # PS1="$hostname_result\[$bakblu\]\[$bldwht\] \w \[$txtrst\]$info_result "
}

# if [[ "$TTY" == "0" ]]
# then
#     PROMPT_COMMAND=set_prompt
# else
#     PROMPT_COMMAND=simple_prompt
# fi

export PYTHONIOENCODING=utf-8

PROMPT_COMMAND=set_prompt

function tag() {
    export TAG=$1
}

function make_zprompt() {
    ret=$? /home/anderson/.config/qtile/bin/zprompt.py
}

if [[ "$SH" == "zsh" ]]
then
    PS1='$(make_zprompt)'
fi

# PROMPT_COMMAND="~/.config/qtile/bin/prompt.py"

